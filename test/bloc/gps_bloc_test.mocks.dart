// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_truck_driver_app/test/bloc/gps_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i5;
import 'package:flutter_truck_driver_app/bloc/gps/gps_bloc.dart' as _i3;
import 'package:flutter_truck_driver_app/services/services.dart' as _i2;
import 'package:geolocator/geolocator.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePermissionService_0 extends _i1.SmartFake
    implements _i2.PermissionService {
  _FakePermissionService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeoLocatorService_1 extends _i1.SmartFake
    implements _i2.GeoLocatorService {
  _FakeGeoLocatorService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGpsState_2 extends _i1.SmartFake implements _i3.GpsState {
  _FakeGpsState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GpsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGpsBloc extends _i1.Mock implements _i3.GpsBloc {
  @override
  set gpsServiceStream(_i4.StreamSubscription<dynamic>? _gpsServiceStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #gpsServiceStream,
          _gpsServiceStream,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.PermissionService get permissionService => (super.noSuchMethod(
        Invocation.getter(#permissionService),
        returnValue: _FakePermissionService_0(
          this,
          Invocation.getter(#permissionService),
        ),
        returnValueForMissingStub: _FakePermissionService_0(
          this,
          Invocation.getter(#permissionService),
        ),
      ) as _i2.PermissionService);
  @override
  set permissionService(_i2.PermissionService? _permissionService) =>
      super.noSuchMethod(
        Invocation.setter(
          #permissionService,
          _permissionService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.GeoLocatorService get geoLocatorService => (super.noSuchMethod(
        Invocation.getter(#geoLocatorService),
        returnValue: _FakeGeoLocatorService_1(
          this,
          Invocation.getter(#geoLocatorService),
        ),
        returnValueForMissingStub: _FakeGeoLocatorService_1(
          this,
          Invocation.getter(#geoLocatorService),
        ),
      ) as _i2.GeoLocatorService);
  @override
  set geoLocatorService(_i2.GeoLocatorService? _geoLocatorService) =>
      super.noSuchMethod(
        Invocation.setter(
          #geoLocatorService,
          _geoLocatorService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.GpsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeGpsState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeGpsState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.GpsState);
  @override
  _i4.Stream<_i3.GpsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.GpsState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i3.GpsState>.empty(),
      ) as _i4.Stream<_i3.GpsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<void> askGpsAccess() => (super.noSuchMethod(
        Invocation.method(
          #askGpsAccess,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void add(_i3.GpsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.GpsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.GpsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i3.GpsEvent>(
    _i5.EventHandler<E, _i3.GpsState>? handler, {
    _i5.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(_i5.Transition<_i3.GpsEvent, _i3.GpsState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i5.Change<_i3.GpsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i2.PermissionService {
  @override
  _i4.Future<bool> get isPermissionGranted => (super.noSuchMethod(
        Invocation.getter(#isPermissionGranted),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i6.PermissionStatus> get permissionStatus => (super.noSuchMethod(
        Invocation.getter(#permissionStatus),
        returnValue:
            _i4.Future<_i6.PermissionStatus>.value(_i6.PermissionStatus.denied),
        returnValueForMissingStub:
            _i4.Future<_i6.PermissionStatus>.value(_i6.PermissionStatus.denied),
      ) as _i4.Future<_i6.PermissionStatus>);
}

/// A class which mocks [GeoLocatorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeoLocatorService extends _i1.Mock implements _i2.GeoLocatorService {
  @override
  _i4.Future<bool> get isLocationServiceEnabled => (super.noSuchMethod(
        Invocation.getter(#isLocationServiceEnabled),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Stream<_i7.ServiceStatus> get serviceStatusStream => (super.noSuchMethod(
        Invocation.getter(#serviceStatusStream),
        returnValue: _i4.Stream<_i7.ServiceStatus>.empty(),
        returnValueForMissingStub: _i4.Stream<_i7.ServiceStatus>.empty(),
      ) as _i4.Stream<_i7.ServiceStatus>);
}
